package ac065

//位运算
//不进位^ 加进位&
//step1:对每一位相加，0+0，1+1的结果是0，0+1，1+0的结果都是1（这异或的结果一样）
//step2:每二步进位：0+0，0+1，1+0都不会产生进位；只有1+1才会向前生产一个进位（此时我们可以想象成两个数先做位与运算，然后再向左移动一位
//step3:第三步把前两步的结果相加：第三步相加的的过程依然是重复前两步，直到不产生进位为止
//二进制左移一位表示*2

func Add(a int, b int) int {
	//表示进位和当前位
	var carry, sum int
	for b != 0 {
		sum = a ^ b
		carry = (a & b) << 1
		a = sum
		b = carry
	}
	return a
}
