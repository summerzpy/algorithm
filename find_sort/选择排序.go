package find_sort

//时间复杂度O(n的平方) 空间复杂度O(1)
//思路：每一轮选取未排定的部分中最小的部分交换到未排定部分的最开头，经过若干个步骤，就能排定整个数组。
//即：先选出最小的，再选出第 2 小的，以此类推。

//选择排序和冒泡排序的区别
//交换次数的不同。冒泡排序每次比较就要立刻交换，而选择排序是把未排序最小的数找出来与它应在的位置上的元素交换
//相对来说，选择排序交换次数较少，一定程度上提高了运算效率

//算法思想 1：贪心算法：每一次决策只看当前，当前最优，则全局最优。注意：这种思想不是任何时候都适用。
//算法思想 2：减治思想：外层循环每一次都能排定一个元素，问题的规模逐渐减少，直到全部解决，即「大而化小，小而化了」。运用「减治思想」很典型的算法就是大名鼎鼎的「二分查找」。
//优点：交换次数最少。

//leetcode912会超时
func sortArray6(nums []int) []int {
	n := len(nums)
	for i := 0; i < n; i++ {
		minIndex := i
		for j := i + 1; j < n; j++ {
			if nums[j] < nums[minIndex] {
				minIndex = j
			}
		}
		nums[minIndex], nums[i] = nums[i], nums[minIndex]
	}
	return nums
}
