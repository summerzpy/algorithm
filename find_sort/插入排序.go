package find_sort

//思路：每次将一个数字插入一个有序的数组里，成为一个长度更长的有序数组，有限次操作以后，数组整体有序。
//时间复杂度O(n的平方) 空间复杂度O(1)
//关联：对链表进行插入排序
//优化：「将一个数字插入一个有序的数组」这一步，可以不使用逐步交换，使用先赋值给「临时变量」，
//然后「适当的元素」后移，空出一个位置，最后把「临时变量」赋值给这个空位的策略（就是上面那张图的意思）。
//编码的时候如果不小心，可能会把数组的值修改，建议多调试；
//特点：「插入排序」可以提前终止内层循环（体现在 nums[j - 1] > temp 不满足时），
//在数组「几乎有序」的前提下，「插入排序」的时间复杂度可以达到 O(N)O(N)；
//由于「插入排序」在「几乎有序」的数组上表现良好，特别地，在「短数组」上的表现也很好。
//因为「短数组」的特点是：每个元素离它最终排定的位置都不会太远。为此，在小区间内执行排序任务的时候，可以转向使用「插入排序」。

func sortArray7(nums []int) []int {
	n := len(nums)
	for i := 1; i < n; i++ {
		tmp, j := nums[i], i
		for j > 0 && nums[j-1] > tmp {
			nums[j] = nums[j-1]
			j--
		}
		nums[j] = tmp
	}
	return nums
}
